---
title: "Kiva Crowdfunding"
author: "Shraddha Powar"
format:
  html:
    toc: true
editor: visual
---

## Required Libraries

```{r}
#| label: load libraries
#| warning: false
#| echo: true
#| results: hide
library(tidyverse)
library(leaflet)
library(knitr)
library(ggplot2)
library(tidyr)
library(tidytext)
library(stringr)
library(DT)
library(treemap)
library(caret)
library(reshape2)
```

## Loading the Data Set

```{r}
#| label: load data
#| warning: false
#| echo: true
#| results: hide
folder_name <- 'D:/NUIG BA/MS5130_Applied Analytics_R/R_A3/data/'

# Load data
kiva_loans <- read_csv(file = paste0(folder_name,"kiva_loans.csv"))
kiva_mpi_region_locations <- read_csv(file = paste0(folder_name,"kiva_mpi_region_locations.csv"))
loan_themes <- read_csv(file = paste0(folder_name,"loan_theme_ids.csv"))

```

## Data Exploration

For all 4 dataset's, we check the datatype of each column using `str()`, view the data snippet using `head()` and shape of the data using `dim()` function.

### Kiva Loans Data

```{r}
#| label: Kiva Loans Data
# To check the data type of each column
str(kiva_loans) 
# To view the data snippet
kable(head(kiva_loans,3))
#To get the shape of data
dim(kiva_loans)
```

### Kiva MPI Region Locations

```{r}
#| label: Kiva MPI Region Locations
# To check the data type of each column
str(kiva_mpi_region_locations) 
# To view the data snippet
kable(head(kiva_mpi_region_locations,3))
#To get the shape of data
dim(kiva_mpi_region_locations)
```

### Loan Themes

```{r}
#| label: Loan Themes
# To check the data type of each column
str(loan_themes) 
# To view the data snippet
kable(head(loan_themes,3))
dim(loan_themes)
```

## Merge Datasets

```{r}
merged_data <- kiva_loans %>%
  left_join(loan_themes, by = "id")
merged_data <- merged_data %>%
  left_join(kiva_mpi_region_locations, by = c("country" = "country", "region" = "region"))
```

### Explore Merged Data

```{r}
#| label: Merged Data
# To check the data type of each column
str(merged_data) 
# To view the data snippet
kable(head(merged_data,3))
dim(merged_data)
```

## Handling Missing Values

To handle missing data we remove all the rows with NA values

```{r}
merged_data <- merged_data[complete.cases(merged_data),]
```

## Exploratory Data Analysis

### Loan Amount Distribution

X-axis is log transformed for better visualization

```{r}
ggplot(merged_data, aes(x = loan_amount)) + 
  geom_histogram(fill = "blue", bins = 30) +
  scale_x_log10() +  # Apply log transformation to the x-axis
  labs(title = "Distribution of Loan Amounts (Log Transformed X Axis)",
       x = "Loan Amount (Log Scale)", 
       y = "Count") +
  theme_minimal()
```

### Distribution of Loans by Gender

```{r}
head(unique(merged_data$borrower_genders))
```

```{r}
merged_data <- merged_data %>%
  mutate(borrower_genders = ifelse(str_detect(borrower_genders, "female"), "female", "male"))
```

```{r}
merged_data %>%
  count(borrower_genders) %>%
  mutate(percent = n / sum(n) * 100) %>%
  ggplot(aes(x = "", y = n, fill = borrower_genders)) +
  geom_col() +
  coord_polar(theta = "y") + # Transform the bar plot into a pie chart
  scale_fill_manual(values = c("female" = "hotpink1", "male" = "cornflowerblue")) +
  geom_text(aes(label = paste0(round(percent, 1), "%"), y = n / 2), 
            position = position_stack(vjust = 0.8)) +
  labs(title = "Distribution of Loans by Gender", fill = "Gender") +
  theme_void()
```

### Loans by Country and Sector

#### Top Countries by Number of Loans

```{r}
merged_data %>% 
  group_by(country) %>% 
  summarise(Count = n()) %>% 
  top_n(10) %>% 
  ggplot(aes(x = reorder(country, Count), y = Count)) + 
  geom_bar(stat = "identity", fill = "springgreen4") + 
  coord_flip() + 
  labs(title = "Top 10 Countries by Number of Loans", x = "", y = "Number of Loans")
```

#### Loans by Sector

```{r}
merged_data %>% 
  group_by(sector) %>% 
  summarise(Count = n()) %>% 
  ggplot(aes(x = reorder(sector, Count), y = Count)) + 
  geom_bar(stat = "identity", fill = "orange") + 
  coord_flip() + 
  labs(title = "Sector by Number of Loans", x = "", y = "Number of Loans")
```

### How does the Multidimensional Poverty Index (MPI) relate to loan amounts?

```{r}
ggplot(merged_data, aes(x = MPI, y = loan_amount)) + 
  geom_point(aes(color = MPI), alpha = 0.5) + 
  scale_color_gradient(low = "yellow", high = "red") + 
  labs(title = "Loan Amount vs. Multidimensional Poverty Index (MPI)", x = "MPI", y = "Loan Amount")
```

Loan amounts tend to be higher in areas with very low Multidimensional Poverty Index (MPI) values, indicating a correlation between lower poverty levels and the ability to secure larger loans.

Conversely, in regions where the MPI is higher, reflecting greater poverty, the loan amounts accessed are significantly lower.

This pattern suggests that the extent of poverty, as measured by the MPI, may influence the scale of financial assistance provided or sought through loans.

### MPI Map

References:

1.  Learning leaflet: <https://geanders.github.io/navy_public_health/4-3-leaflet.html>
2.  For choosing the layer: <https://leaflet-extras.github.io/leaflet-providers/preview/>

```{r}
pal <- colorNumeric(
  palette = colorRampPalette(c('green', 'red'))(length(merged_data$MPI)), 
  domain = merged_data$MPI)

regions_no_NA = merged_data %>%
  filter(!is.na(lon)) %>%
  filter(!is.na(lat))

center_lon = median(merged_data$lon,na.rm = TRUE)
center_lat = median(merged_data$lat,na.rm = TRUE)

leaflet(data = regions_no_NA) %>%
  addTiles() %>%
  addCircleMarkers(
    lng =  ~ lon,
    lat =  ~ lat,
    radius = ~ MPI*10,
    popup =  ~ country,
    color =  ~ pal(MPI)
  ) %>%
  # controls
  #setView(lng=center_lon, lat=center_lat,zoom = 3) %>%
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addLegend("topleft", pal = pal, values = ~MPI,
          title = "MPI Map",
           opacity = 1)
```

## KIVA's Reach by Loan Theme

```{r}
aggregated_data <- merged_data %>%
  group_by(`Loan Theme Type`) %>%
  summarise(TotalFundedAmount = sum(funded_amount, na.rm = TRUE)) %>%
  arrange(desc(TotalFundedAmount))
print(aggregated_data)
```

```{r}
aggregated_data <- aggregated_data %>% 
  filter(`Loan Theme Type` != "General")
```

```{r}
ggplot(head(aggregated_data,10), aes(x = reorder(`Loan Theme Type`, TotalFundedAmount), y = TotalFundedAmount)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(title = "Top 10 Loan Theme Types by Funded Amount",
       x = "Loan Theme Type",
       y = "Total Funded Amount") +
  coord_flip()
```

## Focus Area's for KIVA

[Kiva.org](https://www.kaggle.com/kiva) is an online crowd funding platform to extend financial services to poor and financially excluded people around the world. 

So the data of interest for KIVA are countries with high MPI

```{r}
mpi_quartiles <- quantile(merged_data$MPI, probs = c(0.75), na.rm = TRUE)

# Filter data based on defined criteria
filtered_data <- merged_data %>%
  filter(MPI >= mpi_quartiles[1])
```

```{r}
filtered_data <- merged_data %>%
  filter(MPI >= mpi_quartiles) %>%
  select(country, MPI, loan_amount, activity, sector) %>%
  distinct()
```

```{r}
kiva_opportunities = filtered_data %>%
  group_by(country) %>%
  summarise(LoanAmount = sum(loan_amount)) %>%
  arrange(desc(LoanAmount)) %>%
  ungroup() %>%
  mutate(country = reorder(country,LoanAmount))


treemap(kiva_opportunities, 
        index="country", 
        vSize = "LoanAmount",  
        title="Countries with High MPI", 
        palette = "RdBu" 
)
```

Kiva.org can use the below table to increase their reach towards countries who need more help.

```{r}
datatable(filtered_data, options = list(pageLength = 10), filter = 'top', rownames = FALSE)
```

## Quantitative Analysis

Model to Predict Loan Amount By sector, country & MPI

```{r}
merged_data$sector <- as.factor(merged_data$sector)
merged_data$country <- as.factor(merged_data$country)

# Split data into training and testing sets
set.seed(123)
index <- createDataPartition(merged_data$loan_amount, p=0.8, list=FALSE)
trainData <- merged_data[index, ]
testData <- merged_data[-index, ]

# Build the linear regression model
model <- lm(loan_amount ~ sector + MPI + country, data=trainData)

# Summarize the model
summary(model)

# Predictions
predictions <- predict(model, newdata=testData)
```

A Mean Absolute Error (MAE) of approximately 461.96 suggests that on average, the predictions of your model deviate from the actual values by about 461.96

The target variable `loan_amount` ranges in the thousands, an MAE of 523.62 might indicate a relatively good model performance

```{r}
# Measure performance
MAE <- mean(abs(predictions - testData$loan_amount))
print(paste("Mean Absolute Error:", MAE))

# Calculate RMSE
RMSE <- sqrt(mean((predictions - testData$loan_amount)^2))
print(paste("Root Mean Square Error:", RMSE))

```

## Textual Analysis

```{r}
merged_data %>% 
  unnest_tokens(word, use) %>% 
  count(word, sort = TRUE) %>% 
  top_n(10) %>% 
  ggplot(aes(x = reorder(word, n), y = n)) + 
  geom_bar(stat = "identity", fill = "purple1") + 
  coord_flip() + 
  labs(title = "Top 10 Most Common Words in Loan Uses", x = "", y = "Frequency")
```

## References

Color themes: <https://bookdown.org/hneth/ds4psy/D-3-apx-colors-basics.html>
